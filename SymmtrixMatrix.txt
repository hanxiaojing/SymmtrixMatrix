//对称矩阵及对称矩阵的压缩存储
#include<iostream>
using namespace std;
template<class T>
class SymmtrixMatrix
{
public:
	SymmtrixMatrix(T* a, size_t size)
		:_a(new T[size*(size+1)/2])
		, _size(size*(size + 1) / 2)
	{
		for (int i = 0; i < size; i++)
		{
			for (int j = 0; j < size; j++)
			{
				if (i >= j)
				{
					//将对称矩阵转换为压缩矩阵
					_a[i*(i + 1) / 2+j] = a[i*size+j];
				}
				
			}
		}
	}
//压缩矩阵的访问打印
	void Print(size_t size)
	{
		for (int i = 0; i < size; i++)
		{
			for (int j = 0; j < size; j++)
			{
				int row = i;
				int col = j;
				if (row < col)
				{
					swap(row, col);
				}
				cout << _a[row*(row + 1)/2 + col] << " ";
			
			}
			cout << endl;
		}
		cout << endl;
	}

private:
	T* _a;
	size_t _size;	//即n,对称矩阵为方阵
};

void Test()
{
	int a[5][5] = { 
					{ 0, 1, 2, 3, 4 },
					{ 1, 0, 1, 2, 3 },
					{ 2, 1, 0, 1, 2 },
					{ 3, 2, 1, 0, 1 },
					{ 4, 3, 2, 1, 0 }, 
				  };

	SymmtrixMatrix<int> sm((int*)a, 5);
	sm.Print(5);
	
}

int main()
{
	Test();
	system("pause");
	return 0;
}
